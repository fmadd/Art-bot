API_TOKEN = "8164726137:AAEoAKbXZsB-4i-MTW3QFwf-qJ-JeDSjlak"
import telebot
from telebot import types
import json
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def format(direction):
    return direction.replace(" ", "_")

def load_art_directions():
    with open('data/art_directions.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_art_exhibitions():
    with open('data/art_exhibitions.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_materials(direction):
    materials_path = f'data/materials/{format(direction)}.json'
    if os.path.exists(materials_path):
        with open(materials_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def load_exhibitions(direction):
    exhibitions_path = f'data/exhibitions/{format(direction)}.json'
    if os.path.exists(exhibitions_path):
        with open(exhibitions_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None


def send_materials(message, data, material_type):
    print(material_type)
    content = ''
    if material_type == "–í–∏–¥–µ–æ":
        pcontent = "üé• –í–∏–¥–µ–æ –∏ –ª–µ–∫—Ü–∏–∏:\n\n"
        for video in data.get('videos', []):
            content += f"‚Ä¢ [{video['title']}]({video['url']}).\n\n"
    elif material_type == "–ö–Ω–∏–≥–∏":
        pcontent = "üìö –ö–Ω–∏–≥–∏:\n\n"
        for book in data.get('books', []):
            content += f"‚Ä¢ [{book['title']}]({book['url']}).\n"
            if(book['author']): content += f"–ê–≤—Ç–æ—Ä: {book['author']}.\n"
            content += "\n"
    elif material_type == "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ":
       
        pcontent = "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        dat = data.get('description', [])
        print(dat)
        content = f"{dat}\n\n"
    if content:
        content = pcontent + content
        bot.send_message(message.chat.id, content, parse_mode='Markdown', disable_web_page_preview=True)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

bot = telebot.TeleBot(API_TOKEN)

art_directions = load_art_directions()
art_exhibitions = load_art_exhibitions()
user_states = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exhibitions_button = types.KeyboardButton("–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è")
    materials_button = types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    markup.add(exhibitions_button, materials_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–π –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"])
def main_menu(message):
    if message.text == "–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è":
        user_states[str(message.chat.id)] = 'waiting_for_direction_exhibitions'
        show_directions(message.chat.id, "–≤—ã—Å—Ç–∞–≤–æ–∫")
    elif message.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        user_states[str(message.chat.id)] = 'waiting_for_direction_materials'
        show_directions(message.chat.id, "–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

def show_directions(chat_id, action):
    state = user_states[str(chat_id)]

    if state == 'waiting_for_direction_exhibitions':
        directions_list = "‚Ä¢ "
        directions_list += "\n‚Ä¢ ".join(art_exhibitions.keys())
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for direction in art_exhibitions.keys():
            markup.add(direction)
    elif state == 'waiting_for_direction_materials':
        directions_list = "‚Ä¢ "
        directions_list += "\n‚Ä¢ ".join(art_directions.keys())
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for direction in art_directions.keys():
            markup.add(direction)

    
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(back_button)
    
    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–ø–µ—Ä–∏–æ–¥ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ :\n\n{directions_list}", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in art_directions.keys() or message.text in art_exhibitions.keys()or message.text == "–ù–∞–∑–∞–¥")
def handle_user_direction(message):
    user_id = str(message.chat.id) 

    if message.text == "–ù–∞–∑–∞–¥":
        start(message)  
        user_states.pop(user_id, None)
        return
    
    state = user_states[user_id]
    if state == 'waiting_for_direction_exhibitions':
        exhibitions = load_exhibitions(message.text)
        if exhibitions:
            bot.send_message(user_id, f"–ú–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text}:")
            for exhibition in exhibitions['exhibitions']:
                exhibition_details = (
                    f"*{exhibition['title']}*\n\n"
                    f"üèõÔ∏è {exhibition['description']}\n\n"
                )

                if exhibition['full_description']:
                    exhibition_details += f"üìé [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({exhibition['full_description']}).\n\n"

                exhibition_details += (
                    f"üìç –ê–¥—Ä–µ—Å: {exhibition['address']}.\n\n"
                )

                if 'date' in exhibition:
                    exhibition_details += (
                    f"üìÜ –î–∞—Ç–∞: {exhibition['date']}.\n\n"
                    )

                exhibition_details += (
                    f"üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {exhibition['museum schedule']}.\n\n"
                )

                if exhibition['url']:
                    exhibition_details += f"üéüÔ∏è [–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã]({exhibition['url']}).\n\n"

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–º–µ—Å—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                if 'img' in exhibition and exhibition['img']:
                    print(exhibition['img'])
                    image_path = exhibition['img']
                    with open(image_path, 'rb') as photo:
                        print(image_path)
                        bot.send_photo(
                            user_id, 
                            photo, 
                            caption=exhibition_details, 
                            parse_mode='Markdown'  # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ caption
                        )
                else:
                    bot.send_message(user_id, exhibition_details, parse_mode='Markdown', disable_web_page_preview=True)
        else:
            response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Å—Ç –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            bot.send_message(user_id, response)


    elif state == 'waiting_for_direction_materials':
        materials = load_materials(message.text)
        if materials:

            user_states[user_id + '_direction'] = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–∏–¥–µ–æ", "–ö–Ω–∏–≥–∏", "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "–ù–∞–∑–∞–¥")
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=markup)
            user_states[user_id] = 'waiting_for_material_type'
        else:
            response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            bot.send_message(user_id, response)

@bot.message_handler(func=lambda message: message.text in ["–í–∏–¥–µ–æ", "–ö–Ω–∏–≥–∏", "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "–ù–∞–∑–∞–¥"])
def handle_material_type(message):
    user_id = str(message.chat.id)  
    print(message)
    if message.text == "–ù–∞–∑–∞–¥":
        start(message) 
        user_states.pop(user_id, None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    direction = user_states.get(user_id + '_direction')
    if direction:
        materials = load_materials(direction)
        if materials:
            send_materials(message, materials, message.text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
        else:
            bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    user_states.pop(user_id, None)

if __name__ == '__main__':
    while(True):
        try:
            bot.polling(none_stop=True)
        except:
            continue

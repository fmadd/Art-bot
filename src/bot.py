API_TOKEN = "8164726137:AAEoAKbXZsB-4i-MTW3QFwf-qJ-JeDSjlak"
import telebot
from telebot import types
import json
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

def format(direction):
    return direction.replace(" ", "_")

def load_art_directions():
    with open('data/art_directions.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_materials(direction):
    materials_path = f'data/materials/{format(direction)}.json'
    if os.path.exists(materials_path):
        with open(materials_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def load_exhibitions(direction):
    exhibitions_path = f'data/exhibitions/{format(direction)}.json'
    if os.path.exists(exhibitions_path):
        with open(exhibitions_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None




def send_art_info(message, data):
    description = data['description']

    books_info = "üìö –ö–Ω–∏–≥–∏ –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤—É –î—Ä–µ–≤–Ω–µ–≥–æ –ï–≥–∏–ø—Ç–∞:\n"
    for book in data['books']:
        books_info += f"‚Ä¢ {book['title']}\n–ê–≤—Ç–æ—Ä: {book['author']}\n–°—Å—ã–ª–∫–∞: {book['url']}\n\n"
    
    videos_info = "üé• –í–∏–¥–µ–æ –∏ –ª–µ–∫—Ü–∏–∏:\n"
    for video in data['videos']:
        videos_info += f"‚Ä¢ {video['title']} ({video['time']})\n–°—Å—ã–ª–∫–∞: {video['url']}\n\n"
    
    places_info = "üèõÔ∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞:\n"
    for place in data['interesting_places']:
        places_info += f"‚Ä¢ {place['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {place['description']}\n–ê–¥—Ä–µ—Å: {place['address']}\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {place['museum schedule']}\n–°—Å—ã–ª–∫–∞: {place['url']}\n\n"

    full_message = f"üé® –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n{description}\n\n{books_info}\n{videos_info}\n{places_info}"
    
    def send_message_in_parts(chat_id, text, max_length=4096):
        while len(text) > max_length:
            split_pos = text.rfind('\n', 0, max_length)
            if split_pos == -1:  
                split_pos = text.rfind(' ', 0, max_length)
            if split_pos == -1: 
                split_pos = max_length

            part = text[:split_pos].strip()
            bot.send_message(chat_id, part)

            text = text[split_pos:].strip()

        if text:
            bot.send_message(chat_id, text)

    send_message_in_parts(message.chat.id, full_message)

bot = telebot.TeleBot(API_TOKEN)

art_directions = load_art_directions()
user_states = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exhibitions_button = types.KeyboardButton("–í—ã—Å—Ç–∞–≤–∫–∏")
    materials_button = types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    markup.add(exhibitions_button, materials_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–π –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–í—ã—Å—Ç–∞–≤–∫–∏", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"])
def main_menu(message):
    if message.text == "–í—ã—Å—Ç–∞–≤–∫–∏":
        user_states[message.chat.id] = 'waiting_for_direction_exhibitions'
        show_directions(message.chat.id, "–≤—ã—Å—Ç–∞–≤–æ–∫")
    elif message.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        user_states[message.chat.id] = 'waiting_for_direction_materials'
        show_directions(message.chat.id, "–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

def show_directions(chat_id, action):
    directions_list = "\n".join(art_directions.keys())
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for direction in art_directions.keys():
        markup.add(direction.capitalize())
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(back_button)
    
    bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {action}:\n{directions_list}", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in art_directions.keys() or message.text == "–ù–∞–∑–∞–¥")
def handle_user_direction(message):
    user_id = message.chat.id

    if message.text == "–ù–∞–∑–∞–¥":
        start(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states.pop(user_id, None)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    state = user_states.get(user_id)
    
    if state == 'waiting_for_direction_exhibitions':
        exhibitions = load_exhibitions(message.text)
        if exhibitions:
            exhibitions_list = [f"{exhibition['title']}\n\n{exhibition['description']}\n\n–ê–¥—Ä–µ—Å—Å: {exhibition['address']}\n\n–î–∞—Ç–∞: {exhibition['date']}\n\n–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –º—É–∑–µ—è: {exhibition['museum schedule']}\n\n–°—Å—ã–ª–∫–∞: {exhibition['url']}\n\n"
                                for exhibition in exhibitions['exhibitions']]
            response = f"–í—ã—Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()}:\n\n" + "\n\n".join(exhibitions_list)
        else:
            response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –≤—ã—Å—Ç–∞–≤–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        bot.send_message(user_id, response)

    elif state == 'waiting_for_direction_materials':
        materials = load_materials(message.text)
        if materials:
            send_art_info(message, materials)
        else:
            response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            bot.send_message(user_id, response)

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    #user_states.pop(user_id, None)

if __name__ == '__main__':
    bot.polling(none_stop=True)


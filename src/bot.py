API_TOKEN = "8164726137:AAEoAKbXZsB-4i-MTW3QFwf-qJ-JeDSjlak"
import telebot
from telebot import types
import json
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def format(direction):
    return direction.replace(" ", "_")

def load_art_directions():
    with open('data/art_directions.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_art_exhibitions():
    with open('data/art_exhibitions.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_materials(direction):
    materials_path = f'data/materials/{format(direction)}.json'
    if os.path.exists(materials_path):
        with open(materials_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

def load_exhibitions(direction):
    exhibitions_path = f'data/exhibitions/{format(direction)}.json'
    if os.path.exists(exhibitions_path):
        with open(exhibitions_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

# def escape_markdown(text):
#     escape_chars = ['\\', '`',  '_', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '.', '!']
#     for char in escape_chars:
#         text = text.replace(char, f'\{char}')
#     return text

def send_materials(message, data, material_type):
    content = ''
    if material_type == "–í–∏–¥–µ–æ":
        pcontent = "üé• –í–∏–¥–µ–æ –∏ –ª–µ–∫—Ü–∏–∏:\n"
        for video in data.get('videos', []):
            content += f"‚Ä¢ [{video['title']}]({video['url']})\n\n"
    elif material_type == "–ö–Ω–∏–≥–∏":
        pcontent = "üìö –ö–Ω–∏–≥–∏:\n"
        for book in data.get('books', []):
            content += f"‚Ä¢ [{book['title']}]({book['url']})\n–ê–≤—Ç–æ—Ä: {book['author']}\n\n"
    elif material_type == "–ú–µ—Å—Ç–∞":
        pcontent = "üèõÔ∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞:\n"
        if len(data.get('interesting_places', [])) != 0: 
            for place in data.get('interesting_places', []):
                content += f"‚Ä¢ [{place['title']}]({place['url']})\n–û–ø–∏—Å–∞–Ω–∏–µ: {place['description']}\n–ê–¥—Ä–µ—Å: {place['address']}\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {place['museum schedule']}\n\n"
    print(material_type)
    if content:
        content = pcontent + content
        bot.send_message(message.chat.id, content, parse_mode='Markdown', disable_web_page_preview=True)
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

bot = telebot.TeleBot(API_TOKEN)

art_directions = load_art_directions()
art_exhibitions = load_art_exhibitions()
user_states = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exhibitions_button = types.KeyboardButton("–í—ã—Å—Ç–∞–≤–∫–∏")
    materials_button = types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    markup.add(exhibitions_button, materials_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–∫—É—Å—Å—Ç–≤–æ–≤–µ–¥—á–µ—Å–∫–∏–π –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–í—ã—Å—Ç–∞–≤–∫–∏", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"])
def main_menu(message):
    if message.text == "–í—ã—Å—Ç–∞–≤–∫–∏":
        user_states[str(message.chat.id)] = 'waiting_for_direction_exhibitions'
        show_directions(message.chat.id, "–≤—ã—Å—Ç–∞–≤–æ–∫")
    elif message.text == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        user_states[str(message.chat.id)] = 'waiting_for_direction_materials'
        show_directions(message.chat.id, "–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

def show_directions(chat_id, action):
    state = user_states[str(chat_id)]

    if state == 'waiting_for_direction_exhibitions':
        directions_list = "‚Ä¢ "
        directions_list += "\n‚Ä¢ ".join(art_directions.keys())
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for direction in art_directions.keys():
            markup.add(direction.capitalize())
    elif state == 'waiting_for_direction_materials':
        directions_list = "‚Ä¢ "
        directions_list += "\n‚Ä¢ ".join(art_exhibitions.keys())
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for direction in art_exhibitions.keys():
            markup.add(direction.capitalize())

    
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(back_button)
    
    bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {action}:\n{directions_list}", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in art_directions.keys() or message.text == "–ù–∞–∑–∞–¥")
def handle_user_direction(message):
    user_id = str(message.chat.id) 

    if message.text == "–ù–∞–∑–∞–¥":
        start(message)  
        user_states.pop(user_id, None)
        return
    
    state = user_states[user_id]
    print(user_states, user_id, state)
    if state == 'waiting_for_direction_exhibitions':
        exhibitions = load_exhibitions(message.text)
        if exhibitions:
            bot.send_message(user_id, f"–í—ã—Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()}:")
            for exhibition in exhibitions['exhibitions']:
                
                exhibition_details = (
                    f" *{exhibition['title']}*.\n\n"
                    f"üèõÔ∏è {exhibition['description']}\n\n"
                    f"üìç –ê–¥—Ä–µ—Å—Å: {exhibition['address']}.\n\n"
                    f"üìÜ –î–∞—Ç–∞: {exhibition['date']}.\n\n"
                    f"üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º—É–∑–µ—è: {exhibition['museum schedule']}.\n\n"
                    
                )
                escaped_exhibition_details = exhibition_details #escape_markdown(exhibition_details)
                escaped_exhibition_details += f"üéüÔ∏è [–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã]({exhibition['url']})\n\n"
                bot.send_message(user_id, escaped_exhibition_details, parse_mode='Markdown', disable_web_page_preview=True)
        else:
            response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –≤—ã—Å—Ç–∞–≤–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            bot.send_message(user_id, response)


    elif state == 'waiting_for_direction_materials':
        materials = load_materials(message.text)
        if materials:

            user_states[user_id + '_direction'] = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–í–∏–¥–µ–æ", "–ö–Ω–∏–≥–∏", "–ú–µ—Å—Ç–∞", "–ù–∞–∑–∞–¥")
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=markup)
            user_states[user_id] = 'waiting_for_material_type'
        else:
            response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏–∫–∞–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {message.text.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            bot.send_message(user_id, response)

@bot.message_handler(func=lambda message: message.text in ["–í–∏–¥–µ–æ", "–ö–Ω–∏–≥–∏", "–ú–µ—Å—Ç–∞", "–ù–∞–∑–∞–¥"])
def handle_material_type(message):
    user_id = str(message.chat.id)  

    if message.text == "–ù–∞–∑–∞–¥":
        start(message) 
        user_states.pop(user_id, None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    direction = user_states.get(user_id + '_direction')
    print(direction)
    if direction:
        materials = load_materials(direction)
        if materials:
            send_materials(message, materials, message.text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
        else:
            bot.send_message(user_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    user_states.pop(user_id, None)

if __name__ == '__main__':
    bot.polling(none_stop=True)
